/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import jakarta.persistence.EntityManager;
import jakarta.persistence.Query;
import jakarta.persistence.TypedQuery;
import org.hibernate.Session;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.sql.PreparedStatement;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

class EmbeddableTest {

    EntityManager em;
    AnObject anObject;
    private TopLevel topl;

    /**
     * @throws Exception
     */
    @BeforeEach
    void setUp() throws Exception {
        anObject = new AnObject(new Mpoint( new RealQuantity(1.6, new Unit("madeup")),
              new RealQuantity(1.6, new Unit("madeup2")))
        );
        em = setupH2Db("testing");
        topl = new TopLevel(List.of(anObject));
    }



    @Test void testBaseProperty() {
        em.getTransaction().begin();
        TopLevel topl2 = new TopLevel(topl);
        em.persist(topl);
        em.persist(topl2);
        em.getTransaction().commit();
        Long ida = topl.getId();
        dumpDbData(em,"dump.sql");
  //      em.clear(); // The second query that fails can be made to work by clearing the em.
        TypedQuery<TopLevel> qt = em.createQuery("select o from TopLevel o", TopLevel.class);
        List<TopLevel> qtl = qt.getResultList();
        assertEquals(2,qtl.size());
        TypedQuery<Base> qa = em.createQuery("select o from Base o", Base.class);
        List<Base> deroain = qa.getResultList();
        assertEquals(2,deroain.size());


    }




    protected EntityManager setupH2Db(String puname){
        Map<String, String> props = new HashMap<>();

        props.put("jakarta.persistence.jdbc.url", "jdbc:h2:mem:"+puname+";DB_CLOSE_DELAY=-1");//IMPL differenrt DB for each PU to stop interactions
        props.put("jakarta.persistence.jdbc.driver", "org.h2.Driver");
        props.put("hibernate.dialect", "org.hibernate.dialect.H2Dialect");
        props.put("jakarta.persistence.schema-generation.scripts.create-target", "test.sql");
        props.put("jakarta.persistence.schema-generation.scripts.drop-target", "test-drop.sql");
        props.put("hibernate.hbm2ddl.schema-generation.script.append", "false");

        props.put("jakarta.persistence.schema-generation.create-source", "metadata");
        props.put("jakarta.persistence.schema-generation.database.action", "drop-and-create");
        props.put("jakarta.persistence.schema-generation.scripts.action", "drop-and-create");
        props.put("jakarta.persistence.jdbc.user", "");
        //        props.put(PersistenceUnitProperties.CACHE_SHARED_, "false");


        jakarta.persistence.EntityManagerFactory emf = jakarta.persistence.Persistence.createEntityManagerFactory(puname, props);

       return emf.createEntityManager();

    }
    /**
     * Write the contents of the database to a file.
     * @param em the entity manager for the database.
     * @param filename The name of the file to write the DDL to.
     */
    protected void dumpDbData(EntityManager em, String filename) {
        //IMPL hibernate specific way of getting connection... generally dirty, see  https://stackoverflow.com/questions/3493495/getting-database-connection-in-pure-jpa-setup
        Session sess = em.unwrap(Session.class);
        sess.doWork(conn -> {
            PreparedStatement ps = conn.prepareStatement("SCRIPT TO ?"); // this is H2db specific
            ps.setString(1, filename);
            ps.execute();
        });
    }

}
